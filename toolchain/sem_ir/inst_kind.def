// Part of the Carbon Language project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// This is an X-macro header. It does not use `#include` guards, and instead is
// designed to be `#include`ed after the x-macro is defined in order for its
// inclusion to expand to the desired output. Macro definitions are cleaned up
// at the end of this file.
//
// This macro should be defined before including this header:
// - CARBON_SEM_IR_INST_KIND(Name)
//   Invoked for each kind of semantic instruction.
//
// Temporarily, we have CARBON_SEM_IR_BUILTIN_INST_KIND too:
//
// - CARBON_SEM_IR_BUILTIN_INST_KIND(Name, Label)
//   Defines a non-Invalid builtin type. The label is used for stringifying
//   types. Falls back to CARBON_SEM_IR_INST_KIND if not defined.
//
// TODO: Merge builtin instructions into the standard CARBON_SEM_IR_INST_KIND,
// tracking the "builtin" annotation separately. This approach is used for
// legacy compatibility.

// If CARBON_SEM_IR_BUILTIN_INST_KIND is missing, default to
// CARBON_SEM_IR_INST_KIND. However, if it's provided, make
// CARBON_SEM_IR_INST_KIND optional. Per the above TODO, this is temporary.
#ifndef CARBON_SEM_IR_BUILTIN_INST_KIND
#define CARBON_SEM_IR_BUILTIN_INST_KIND(Name, ...) CARBON_SEM_IR_INST_KIND(Name)
#else
#ifndef CARBON_SEM_IR_INST_KIND
#define CARBON_SEM_IR_INST_KIND(Name)
#endif
#endif

#ifndef CARBON_SEM_IR_INST_KIND
#error "Must define the x-macro to use this file."
#endif

// Tracks expressions which are valid as types.
// This has a deliberately self-referential type.
CARBON_SEM_IR_BUILTIN_INST_KIND(TypeType, "type")

// Used when a semantic error has been detected, and a SemIR InstId is still
// required. For example, when there is a type checking issue, this will be used
// in the type_id. It's typically used as a cue that semantic checking doesn't
// need to issue further diagnostics.
CARBON_SEM_IR_BUILTIN_INST_KIND(ErrorInst, "<error>")

// Used for the type of patterns that do not match a fixed type.
CARBON_SEM_IR_BUILTIN_INST_KIND(AutoType, "auto")

// -----------------------------------------------------------------------------
// TODO: Below CARBON_SEM_IR_BUILTIN_INST_KIND types are all placeholders. While
// the above may last, the below are expected to need to change in order to
// better reflect Carbon's design. Keeping distinct placeholders can help find
// usages for later fixes.
// -----------------------------------------------------------------------------

// The type of bool literals and branch conditions, bool.
CARBON_SEM_IR_BUILTIN_INST_KIND(BoolType, "bool")

// An arbitrary-precision integer type, which is used as the type of integer
// literals and as the parameter type of `Core.Int` and `Core.Float`. This type
// only provides compile-time operations, and is represented as an empty type at
// runtime.
CARBON_SEM_IR_BUILTIN_INST_KIND(IntLiteralType, "Core.IntLiteral")

// The legacy float type. This is currently used for real literals, and is
// treated as f64. It's separate from `FloatType`, and should change to mirror
// integers, likely replacing this with a `FloatLiteralType`.
CARBON_SEM_IR_BUILTIN_INST_KIND(LegacyFloatType, "f64")

// The type of string values and String literals.
CARBON_SEM_IR_BUILTIN_INST_KIND(StringType, "String")

// The type of bound method values.
CARBON_SEM_IR_BUILTIN_INST_KIND(BoundMethodType, "<bound method>")

// The type of specific functions.
CARBON_SEM_IR_BUILTIN_INST_KIND(SpecificFunctionType, "<specific function>")

// The type of namespace and imported package names.
CARBON_SEM_IR_BUILTIN_INST_KIND(NamespaceType, "<namespace>")

// The type of witnesses.
CARBON_SEM_IR_BUILTIN_INST_KIND(WitnessType, "<witness>")

// The type of virtual function tables
CARBON_SEM_IR_BUILTIN_INST_KIND(VtableType, "<vtable>")

// For each instruction kind declared here there is a matching definition in
// `typed_insts.h`.
CARBON_SEM_IR_INST_KIND(AdaptDecl)
CARBON_SEM_IR_INST_KIND(AddrOf)
CARBON_SEM_IR_INST_KIND(AddrPattern)
CARBON_SEM_IR_INST_KIND(ArrayIndex)
CARBON_SEM_IR_INST_KIND(ArrayInit)
CARBON_SEM_IR_INST_KIND(ArrayType)
CARBON_SEM_IR_INST_KIND(AsCompatible)
CARBON_SEM_IR_INST_KIND(Assign)
CARBON_SEM_IR_INST_KIND(AssociatedConstantDecl)
CARBON_SEM_IR_INST_KIND(AssociatedEntity)
CARBON_SEM_IR_INST_KIND(AssociatedEntityType)
CARBON_SEM_IR_INST_KIND(BaseDecl)
CARBON_SEM_IR_INST_KIND(BindAlias)
CARBON_SEM_IR_INST_KIND(ExportDecl)
CARBON_SEM_IR_INST_KIND(BindingPattern)
CARBON_SEM_IR_INST_KIND(BindName)
CARBON_SEM_IR_INST_KIND(BindSymbolicName)
CARBON_SEM_IR_INST_KIND(BindValue)
CARBON_SEM_IR_INST_KIND(BlockArg)
CARBON_SEM_IR_INST_KIND(BoolLiteral)
CARBON_SEM_IR_INST_KIND(BoundMethod)
CARBON_SEM_IR_INST_KIND(Branch)
CARBON_SEM_IR_INST_KIND(BranchIf)
CARBON_SEM_IR_INST_KIND(BranchWithArg)
CARBON_SEM_IR_INST_KIND(Call)
CARBON_SEM_IR_INST_KIND(ClassDecl)
CARBON_SEM_IR_INST_KIND(ClassElementAccess)
CARBON_SEM_IR_INST_KIND(ClassInit)
CARBON_SEM_IR_INST_KIND(ClassType)
CARBON_SEM_IR_INST_KIND(CompleteTypeWitness)
CARBON_SEM_IR_INST_KIND(ConstType)
CARBON_SEM_IR_INST_KIND(Converted)
CARBON_SEM_IR_INST_KIND(Deref)
CARBON_SEM_IR_INST_KIND(FacetType)
CARBON_SEM_IR_INST_KIND(FacetTypeAccess)
CARBON_SEM_IR_INST_KIND(FieldDecl)
CARBON_SEM_IR_INST_KIND(FloatLiteral)
CARBON_SEM_IR_INST_KIND(FloatType)
CARBON_SEM_IR_INST_KIND(FunctionDecl)
CARBON_SEM_IR_INST_KIND(FunctionType)
CARBON_SEM_IR_INST_KIND(GenericClassType)
CARBON_SEM_IR_INST_KIND(GenericInterfaceType)
CARBON_SEM_IR_INST_KIND(ImplDecl)
CARBON_SEM_IR_INST_KIND(ImportDecl)
CARBON_SEM_IR_INST_KIND(ImportRefUnloaded)
CARBON_SEM_IR_INST_KIND(ImportRefLoaded)
CARBON_SEM_IR_INST_KIND(InitializeFrom)
CARBON_SEM_IR_INST_KIND(InterfaceDecl)
CARBON_SEM_IR_INST_KIND(InterfaceWitness)
CARBON_SEM_IR_INST_KIND(InterfaceWitnessAccess)
CARBON_SEM_IR_INST_KIND(IntValue)
CARBON_SEM_IR_INST_KIND(IntType)
CARBON_SEM_IR_INST_KIND(NameRef)
CARBON_SEM_IR_INST_KIND(Namespace)
CARBON_SEM_IR_INST_KIND(OutParam)
CARBON_SEM_IR_INST_KIND(OutParamPattern)
CARBON_SEM_IR_INST_KIND(PointerType)
CARBON_SEM_IR_INST_KIND(RequirementRewrite)
CARBON_SEM_IR_INST_KIND(RequirementEquivalent)
CARBON_SEM_IR_INST_KIND(RequirementImpls)
CARBON_SEM_IR_INST_KIND(Return)
CARBON_SEM_IR_INST_KIND(ReturnExpr)
CARBON_SEM_IR_INST_KIND(ReturnSlot)
CARBON_SEM_IR_INST_KIND(ReturnSlotPattern)
CARBON_SEM_IR_INST_KIND(SpecificConstant)
CARBON_SEM_IR_INST_KIND(SpecificFunction)
CARBON_SEM_IR_INST_KIND(SpliceBlock)
CARBON_SEM_IR_INST_KIND(StringLiteral)
CARBON_SEM_IR_INST_KIND(StructAccess)
CARBON_SEM_IR_INST_KIND(StructInit)
CARBON_SEM_IR_INST_KIND(StructLiteral)
CARBON_SEM_IR_INST_KIND(StructType)
CARBON_SEM_IR_INST_KIND(StructValue)
CARBON_SEM_IR_INST_KIND(SymbolicBindingPattern)
CARBON_SEM_IR_INST_KIND(TemporaryStorage)
CARBON_SEM_IR_INST_KIND(Temporary)
CARBON_SEM_IR_INST_KIND(TupleAccess)
CARBON_SEM_IR_INST_KIND(TupleInit)
CARBON_SEM_IR_INST_KIND(TupleLiteral)
CARBON_SEM_IR_INST_KIND(TupleType)
CARBON_SEM_IR_INST_KIND(TupleValue)
CARBON_SEM_IR_INST_KIND(UnaryOperatorNot)
CARBON_SEM_IR_INST_KIND(UnboundElementType)
CARBON_SEM_IR_INST_KIND(ValueAsRef)
CARBON_SEM_IR_INST_KIND(ValueOfInitializer)
CARBON_SEM_IR_INST_KIND(ValueParam)
CARBON_SEM_IR_INST_KIND(ValueParamPattern)
CARBON_SEM_IR_INST_KIND(VarStorage)
CARBON_SEM_IR_INST_KIND(WhereExpr)

#undef CARBON_SEM_IR_INST_KIND
#undef CARBON_SEM_IR_BUILTIN_INST_KIND
